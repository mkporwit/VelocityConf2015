Alex Schoof
Fugue

Managing Secrets at Scale

Secrets are EVERYWHERE
	SSL private keys, DB encryption passwds, API keys for 3rd party apps, etc...

We manage secrets the way we tell people NOT to manage software
	secret management should become part of core infra
	Lots of new tools in 2015: KeyWiz, Stash, Sneaker, etc...

Need to understand your threat model and trust boundaries
	what is the blast radius if these secrets got out?

Core principles of modern secret management
	minimal privilege -- least privileged access for actors
		good auth/authz on secrets
		enforceable ACLs for operations on secrets
		audit trail
	secrets expire -- for various reasons such as built-in expiration, internal policy, compromise, etc.
		deployment of secrets will never be a one-time event
		must easily be able to rotate secrets
		secrets should NEVER be in source control
			SCCS are optimal for sharing, not restricting access
			don't want secrets scattered throughout
			rotating secrets should not requrie a deployment
	should be easier to do the right thing than the wrong thing -- don't require complex rituals, waits, etc, or people will circumvent
		Need to provide easy-to-use programmatic operations on secrets
	weakest link -- secret is only as strong as the weakest link in the chain
		strong controls on secret operations
		never persistet in plain text
		proper root secret storage is very important
	secrets must be highly available -- modern applications need easy access to secrets
		Tier-0 service
		need good operational and deployment practices
		should not have circular dependencies, such as key to decrypt secret store being stored in the secret store...

How a secret management system works
	Don't implement your own or someone else's crypto
	Use standard libraries and tested algorithms

	How do you manage the master encryption key for the secrets store?
		Store it somewhere (hardware solutions)
			Hardware Security Module
			Trusted Platform Module
			Smartcard
			Support PKCS#11 -- generate & import keys, use keys, cannot export keys
			Need password or cert to use
		Store it somewhere (software solutions)
			HSM-like interface over a network
			Available in public cloud environments (eg AWS KSM)
		Generate it programmatically
			Quorum Systems
				Shamir's secret sharing
				keep shares on smartcards, safes, etc
				creates collusion requirement
			Peer to peer induction of secret servers
				stand up master server, have it verify other servers
				very difficult to do right
	Key wrapping
		Secure key storage is expensive
		Generate keys specific to each secret, and encrypt those keys with the master key
	Secure logging
		append only
		signed logs -- use an existing implementation, don't write your own
	Authenticating the Service -- TLS with keys
	Authenticating the client
		Either client SSL keys, or API keys to sign requests to the secret service
	Protecting the auth token
		SELinux? Other mechanism? Just FS permissions?

	Basic Operations
		create(name, value)
			ACL check
			Log
			Wrap value and store in secrets store
		read(name)
			ACL check
			log
			unwrap
		update(name, value)
			ACL check
			log
			wrap value
			write new version of the value -- secrets should be immutable. Work on versions of secrets
		delete(name, value, version)
			ACL check
			log
			distinguish between actual delete and logical delete
				usuall just logical delete, except in case of compromise
			revoke async public keys
		list(name?,version?)
			ACL, log, list
		put_policy(name,value,policy)
			PRIVILEGE ESCALATION VECTOR - should require higher-lever admin interface
	Considerations for interaces and libraries
		Make sure you don't leak secrets
			core dumps, logs, swap, etc...
		easy-to-use verbs
		HA Secret Services
			run in multiple availability zones
			close to clients
			need to be able to boot/induct new instances of secret service
			harden the secret service servers
		Management
			metrics, canaries, integration tests, code reviews, ACL on commit/deploy
		Client-side caching
			cache cannot write plaintext to disk (including core dumps, swap, etc)
			access controls on cache

Look at existing open-source secret management systems
	Vault -- client/server system written by Hashicorp
		pluggable backends for storage (disk or Consul)
		secret splitting using quorum
		policy language
		CLI or RESTful API
		dynamic scret system
	Keywhiz -- from Square
		RDBMS for secrets storage
		HMAC-based key derivation system from master key
		CLI, API, and neat FUSE driver so secrets can be accessed as files
	CredStash
		Written in python for managing secrets, especially on AWS
		DynamoDB for storage
		IAM policies for ACL, IAM Roles for identity
		CLI, python, and Puppet/Ansible modules
	Sneaker
		Golang utility for AWS secrets
		Uses S3 for secret store
		Very similar to CredStash
	Most of these tools are very, very new
		looking for contributors
		might not be the perfect solution for your problems -- understand tradeoffs

Secrets management should be code infrastructure
Slides at bit.ly/1kXSTaa -- copy checked into github repo
